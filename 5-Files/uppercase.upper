# PURPOSE: CONVERT INPUT FILE TO OUTPUT WITH ALL UPPERCASE LETTERS

.SECTION .DATA

######### CONSTANTS ##############
.EQU SYS_OPEN, 5
.EQU SYS_WRITE, 4
.EQU SYS_READ, 3
.EQU SYS_CLOSE, 6
.EQU SYS_EXIT, 1

.EQU O_RDONLY, 0
.EQU O_CREAT_WRONLY_TRUNC, 03101

.EQU STDIN, 0
.EQU STDOUT, 1
.EQU STDERR, 2

.EQU LINUX_SYSCALL, 0X80

.EQU END_OF_FILE, 0

.EQU NUMBER_ARGUMENTS, 2

.SECTION .BSS
.EQU BUFFER_SIZE, 500
.LCOMM BUFFER_DATA, BUFFER_SIZE

.SECTION .TEXT

# STACK POSITIONS
.EQU ST_SIZE_RESERVE, 8
.EQU ST_FD_IN, -4
.EQU ST_FD_OUT, -8
.EQU ST_ARGC, 0  # NUMBER OF ARGUMENTS
.EQU ST_ARGV_0, 4 # NAME OF PROGRAM
.EQU ST_ARGV_1, 8 # INPUT FILE NAME
.EQU ST_ARGV_2, 12 # OUTPUT FILE NAME

.GLOBL _START
_START:
    # SAVE THE STACK POINTER
    MOVL %ESP, %EBP
    SUBL $ST_SIZE_RESERVE, %ESP # ALLOCATE SPACE FOR FILE DESCRIPTORS

OPEN_FILES:
OPEN_FD_IN:
    MOVL $SYS_OPEN, %EAX # SYSTEM CALL
    MOVL ST_ARGV_1(%EBP), %EBX # INPUT FILENAME
    MOVL $O_RDONLY, %ECX # READ ONLY FLAG
    MOVL $0666, %EDX
    INT $LINUX_SYSCALL
STORE_FD_IN:
    # SAVE THE GIVEN FILE DESCRIPTOR
    MOVL %EAX, ST_FD_IN(%EBP)
OPEN_FD_OUT:
    MOVL $SYS_OPEN, %EAX # OPEN THE FILE
    MOVL ST_ARGV_2(%EBP), %EBX # OUTPUT FILE INTO %EBX
    MOVL $O_CREAT_WRONLY_TRUNC, %ECX # FLAGS
    MOVL $0666, %EDX # MODE FOR NEW FILE
    INT $LINUX_SYSCALL
STORE_FD_OUT:
    MOVL %EAX, ST_FD_OUT(%EBP) # STORE THE FILE DESCRIPTOR HERE

READ_LOOP_BEGIN:
    ### READ IN BLOCK ###
    MOVL $SYS_READ, %EAX
    MOVL ST_FD_IN(%EBP), %EBX # INPUT FILE DESCRIPTOR
    MOVL $BUFFER_DATA, %ECX # THE LOCATION TO READ INTO
    MOVL $BUFFER_SIZE, %EDX # THE BUFFER SIZE
    # SIZE OF BUFFER READ IS RETURNED IN %EAX
    INT $LINUX_SYSCALL

    ### EXIT IF WE'VE REACHED THE END ###
    CMPL $END_OF_FILE, %EAX
    JLE END_LOOP

CONTINUE_READ_LOOP:
    ### CONVERT THE BLOCK TO UPPER CASE
    PUSHL $BUFFER_DATA # LOCATION OF THE BUFFER
    PUSHL %EAX # SIZE OF THE BUFFER
    CALL CONVERT_TO_UPPER
    POPL %EAX # GET THE SIZE BACK
    ADDL $4, %ESP  # RESTORE %ESP

    ## WRITE THE BLOCK TO THE OUTPUT FILE ###

    MOVL %EAX, %EDX # SIZE OF THE BUFFER
    MOVL $SYS_WRITE, %EAX
    MOVL ST_FD_OUT(%EBP), %EBX
    MOVL $BUFFER_DATA, %ECX
    INT $LINUX_SYSCALL

    ### CONTINUE THE LOOP ###
    JMP READ_LOOP_BEGIN

END_LOOP:
    ### CLOSE THE FILES ###
    MOVL $SYS_CLOSE, %EAX
    MOVL ST_FD_OUT(%EBP), %EBX
    INT $LINUX_SYSCALL

    MOVL $SYS_CLOSE, %EAX
    MOVL ST_FD_IN(%EBP), %EBX
    INT $LINUX_SYSCALL

    ### EXIT ###
    MOVL $SYS_EXIT, %EAX
    MOVL $0, %EBX
    INT $LINUX_SYSCALL


### CONVERT LOWERCASE TO UPPERCASE ###

.EQU LOWERCASE_A, 'A'
.EQU LOWERCASE_Z, 'Z'
.EQU UPPER_CONVERSION, 'A' - 'A'

.EQU ST_BUFFER_LEN, 8 # LENGTH OF BUFFER
.EQU ST_BUFFER, 12 # ACTUAL BUFFER

CONVERT_TO_UPPER:
    PUSHL %EBP
    MOVL %ESP, %EBP

    MOVL ST_BUFFER(%EBP), %EAX
    MOVL ST_BUFFER_LEN(%EBP), %EBX
    MOVL $0, %EDI

    # IF BUFFER LENGTH IS 0, THEN LEAVE
    CMPL $0, %EBX
    JE END_CONVERT_LOOP

CONVERT_LOOP:
    MOVB (%EAX,%EDI,1), %CL # GET THE CURRENT BYTE

    CMPB $LOWERCASE_A, %CL
    JL NEXT_BYTE
    CMPB $LOWERCASE_Z, %CL
    JG NEXT_BYTE

    # OTHERWISE, CONVERT THE BYTE TO UPPERCASE
    ADDB $UPPER_CONVERSION, %CL
    MOVB %CL, (%EAX,%EDI,1)
NEXT_BYTE:
    INCL %EDI
    CMPL %EDI, %EBX # CONTINUE UNLESS WE'VE REACHED THE END
    JNE CONVERT_LOOP

END_CONVERT_LOOP:
    MOVL %EBP , %ESP
    POPL %EBP
    RET

